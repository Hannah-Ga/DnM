@startuml

skinparam sequenceMessageAlign center
skinparam style strictuml
title UML-Sequenzdiagramm presents: \n __"Chunk be gone"__

actor Player
participant Minecraft
participant NegativeDice
participant DiceRoll
participant DiceEventGen
participant ModifyingTerrain

activate Minecraft

Player -> Minecraft: rightClick
note left: Spieler drückt mit der rechten Maustaste...

Minecraft -> NegativeDice: rightClick()

note left: ...gefolgt von rightClick() Funktion \nfür einen negativen Würfel.
activate NegativeDice


NegativeDice -> DiceRoll: TypedActionResult<ItemStack> use(world, user, hand)
activate DiceRoll
NegativeDice --> Minecraft
note left: Diese Methode übersetzt unseren sekundären Klick,\nauf eine Weise, die Minecraft verstehen kann.\nDas Spiel weiß bereits, welcher Gegenstand \nbenutzt oder in der Hand gehalten wird.



DiceRoll -> DiceEventGen: RollDice("negative")
activate DiceEventGen
DiceRoll --> NegativeDice
note left: Die DiceRoll-Klasse entscheidet, welche Zahl vom Spieler "gewürfelt" wurde, \nabhängig von einem bestimmten Würfel. RollDice() gibt Informationen mit einer Zahl \nund einem Würfelnamen zur nächsten Sequenz.
deactivate NegativeDice
deactivate DiceRoll

alt randomNumber == 2
    DiceEventGen -> ModifyingTerrain: DecideEvent(2, "negative")
    activate ModifyingTerrain

    ModifyingTerrain -> Minecraft: RemoveBlocks(world, serverWorld, playerPos)
    ModifyingTerrain --> Minecraft
    deactivate ModifyingTerrain
    note left: Wenn die zufällig generierte Zahl 2 ist, wird der Chunk \n/*oder vielmehr der ausgewählte Bereich*/ \nmit der RemoveBlocks() Funktion \ngelöscht und dann in unserer Minecraft Welt aktualisiert.

else randomNumber
    DiceEventGen -> Minecraft: DecideEvent(pDiceNum, "negative")
    DiceEventGen --> Minecraft
    note left: Jede andere Zufallszahl (pDiceNum) bedeutet, \ndass ein anderes Ereignis mit den negativen Würfeln "gewürfelt" wird.
    deactivate DiceEventGen
end

@enduml